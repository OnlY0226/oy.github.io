const e=JSON.parse(`{"key":"v-6da3168e","path":"/frontend/gitOrder.html","title":"Git Order","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-08-30T00:00:00.000Z","category":["前端开发"],"tag":["Git","指令"],"order":1,"description":"Git Order git 拉取远程代码 前置配置 1.git init 初始化（创建）本地仓库，可以看到项目文件夹下生成的.git隐藏文件夹。这个文件夹会记录以后每次的更改和提交。 2.git config --global user.name 'Kael'git初次使用配置个人用户名，如果以前已经配置，通过git config user.name查看。 3.git config --global user.email 'pankai486@qq.com'git初次使用时要先配置个人邮箱，如果以前已经配置，通过git config user.email查看。 4.ssh-keygen -t rsa -C \\"pankai486@qq.com\\"生成SSH公钥（基于个人邮箱），如果以前已经生成，也可以跳过这步。 5.cat ~/.ssh/id_rsa.pub获取生成的SSH公钥，如果报错，则使用上一步的命令重新生成公钥，复制公钥到阿里云，要从ssh-rsa开头开始复制起。 第一步：拉取远程代码 git clone https://github.com/…/PrettyGirls.git 第2步: 配置远程仓库地址 　　添加远程仓库地址：git remote add origin \\"git@github.com:Only-APTX-4869/demo.git\\" 　　查看远程仓库地址：git remote -v","head":[["meta",{"property":"og:url","content":"https://github.com/OnlY0226/OnlY0226.github.io/frontend/gitOrder.html"}],["meta",{"property":"og:site_name","content":"Only"}],["meta",{"property":"og:title","content":"Git Order"}],["meta",{"property":"og:description","content":"Git Order git 拉取远程代码 前置配置 1.git init 初始化（创建）本地仓库，可以看到项目文件夹下生成的.git隐藏文件夹。这个文件夹会记录以后每次的更改和提交。 2.git config --global user.name 'Kael'git初次使用配置个人用户名，如果以前已经配置，通过git config user.name查看。 3.git config --global user.email 'pankai486@qq.com'git初次使用时要先配置个人邮箱，如果以前已经配置，通过git config user.email查看。 4.ssh-keygen -t rsa -C \\"pankai486@qq.com\\"生成SSH公钥（基于个人邮箱），如果以前已经生成，也可以跳过这步。 5.cat ~/.ssh/id_rsa.pub获取生成的SSH公钥，如果报错，则使用上一步的命令重新生成公钥，复制公钥到阿里云，要从ssh-rsa开头开始复制起。 第一步：拉取远程代码 git clone https://github.com/…/PrettyGirls.git 第2步: 配置远程仓库地址 　　添加远程仓库地址：git remote add origin \\"git@github.com:Only-APTX-4869/demo.git\\" 　　查看远程仓库地址：git remote -v"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-01-04T00:35:42.000Z"}],["meta",{"property":"article:author","content":"OnlY"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:tag","content":"指令"}],["meta",{"property":"article:published_time","content":"2023-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-01-04T00:35:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git Order\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-01-04T00:35:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OnlY\\"}]}"]]},"headers":[{"level":2,"title":"git","slug":"git","link":"#git","children":[{"level":3,"title":"拉取远程代码","slug":"拉取远程代码","link":"#拉取远程代码","children":[]},{"level":3,"title":"分支","slug":"分支","link":"#分支","children":[]},{"level":3,"title":"合并代码","slug":"合并代码","link":"#合并代码","children":[]},{"level":3,"title":"撤销commit","slug":"撤销commit","link":"#撤销commit","children":[]},{"level":3,"title":"提交代码","slug":"提交代码","link":"#提交代码","children":[]},{"level":3,"title":"暂存的内容","slug":"暂存的内容","link":"#暂存的内容","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":3,"title":"版本之间的穿梭回退","slug":"版本之间的穿梭回退","link":"#版本之间的穿梭回退","children":[]},{"level":3,"title":"合并特定commit","slug":"合并特定commit","link":"#合并特定commit","children":[]},{"level":3,"title":"合并commits","slug":"合并commits","link":"#合并commits","children":[]},{"level":3,"title":"子模块","slug":"子模块","link":"#子模块","children":[]}]},{"level":2,"title":"npm&yarn&pnpm","slug":"npm-yarn-pnpm","link":"#npm-yarn-pnpm","children":[{"level":3,"title":"pnpm i --shamefully-hoist","slug":"pnpm-i-shamefully-hoist","link":"#pnpm-i-shamefully-hoist","children":[]},{"level":3,"title":"镜像","slug":"镜像","link":"#镜像","children":[]}]},{"level":2,"title":"nvm","slug":"nvm","link":"#nvm","children":[]},{"level":2,"title":"ubantu","slug":"ubantu","link":"#ubantu","children":[{"level":3,"title":"txt 乱码修复","slug":"txt-乱码修复","link":"#txt-乱码修复","children":[]},{"level":3,"title":"清理系统垃圾","slug":"清理系统垃圾","link":"#清理系统垃圾","children":[]},{"level":3,"title":"优化系统启动项","slug":"优化系统启动项","link":"#优化系统启动项","children":[]},{"level":3,"title":"vim","slug":"vim","link":"#vim","children":[]}]}],"git":{"createdTime":1693367182000,"updatedTime":1704328542000,"contributors":[{"name":"Oy","email":"OY.Ou@weltronics.com","commits":6},{"name":"oy","email":"OY.Ou@weltronics.com","commits":1}]},"readingTime":{"minutes":6.25,"words":1876},"filePathRelative":"frontend/gitOrder.md","localizedDate":"2023年8月30日","excerpt":"<h1> Git Order</h1>\\n<h2> git</h2>\\n<h3> 拉取远程代码</h3>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>前置配置\\n1.git init 初始化（创建）本地仓库，可以看到项目文件夹下生成的.git隐藏文件夹。这个文件夹会记录以后每次的更改和提交。\\n\\n2.git config --global user.name 'Kael'git初次使用配置个人用户名，如果以前已经配置，通过git config user.name查看。\\n\\n3.git config --global user.email 'pankai486@qq.com'git初次使用时要先配置个人邮箱，如果以前已经配置，通过git config user.email查看。\\n\\n4.ssh-keygen -t rsa -C \\"pankai486@qq.com\\"生成SSH公钥（基于个人邮箱），如果以前已经生成，也可以跳过这步。\\n\\n5.cat ~/.ssh/id_rsa.pub获取生成的SSH公钥，如果报错，则使用上一步的命令重新生成公钥，复制公钥到阿里云，要从ssh-rsa开头开始复制起。\\n\\n第一步：拉取远程代码\\ngit clone https://github.com/…/PrettyGirls.git\\n第2步: 配置远程仓库地址\\n　　添加远程仓库地址：git remote add origin \\"git@github.com:Only-APTX-4869/demo.git\\"\\n　　查看远程仓库地址：git remote -v\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{e as data};
