const e=JSON.parse('{"key":"v-5b30932c","path":"/frontend/js.html","title":"js","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2023-08-30T00:00:00.000Z","category":["前端开发"],"order":1,"description":"js 数组 数组变树 toTree (data) { // 空数组 const result = [] if (!Array.isArray(data)) return result // 判断不是数组 直接返回 data.forEach(item =&gt; { delete item.children }) // 清空children const map = {} data.forEach(item =&gt; { map[item.id] = JSON.parse(JSON.stringify(item)) }) data.forEach(item =&gt; { const parent = map[item.parentId] if (parent) { if (!parent.children) parent.children = [] parent.children.push(item) } else { result.push(item) } }) return result }","head":[["meta",{"property":"og:url","content":"https://github.com/OnlY0226/OnlY0226.github.io/frontend/js.html"}],["meta",{"property":"og:site_name","content":"Only"}],["meta",{"property":"og:title","content":"js"}],["meta",{"property":"og:description","content":"js 数组 数组变树 toTree (data) { // 空数组 const result = [] if (!Array.isArray(data)) return result // 判断不是数组 直接返回 data.forEach(item =&gt; { delete item.children }) // 清空children const map = {} data.forEach(item =&gt; { map[item.id] = JSON.parse(JSON.stringify(item)) }) data.forEach(item =&gt; { const parent = map[item.parentId] if (parent) { if (!parent.children) parent.children = [] parent.children.push(item) } else { result.push(item) } }) return result }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-19T08:12:24.000Z"}],["meta",{"property":"article:author","content":"OnlY"}],["meta",{"property":"article:published_time","content":"2023-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-19T08:12:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-19T08:12:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OnlY\\"}]}"]]},"headers":[{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"数组变树","slug":"数组变树","link":"#数组变树","children":[]},{"level":3,"title":"过滤树级数据","slug":"过滤树级数据","link":"#过滤树级数据","children":[]}]}],"git":{"createdTime":1695106861000,"updatedTime":1695111144000,"contributors":[{"name":"Oy","email":"OY.Ou@weltronics.com","commits":2}]},"readingTime":{"minutes":0.39,"words":118},"filePathRelative":"frontend/js.md","localizedDate":"2023年8月30日","excerpt":"<h1> js</h1>\\n<h2> 数组</h2>\\n<h3> 数组变树</h3>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>toTree (data) {\\n  // 空数组\\n  const result = []\\n  if (!Array.isArray(data)) return result // 判断不是数组  直接返回\\n  data.forEach(item =&gt; {\\n    delete item.children\\n  }) // 清空children\\n  const map = {}\\n  data.forEach(item =&gt; { map[item.id] = JSON.parse(JSON.stringify(item)) })\\n  data.forEach(item =&gt; {\\n    const parent = map[item.parentId]\\n    if (parent) {\\n      if (!parent.children) parent.children = []\\n      parent.children.push(item)\\n    } else {\\n      result.push(item)\\n    }\\n  })\\n  return result\\n}\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
